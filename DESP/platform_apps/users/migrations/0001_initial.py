# Generated by Django 3.2.4 on 2021-09-06 14:43

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('organizations', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DESPUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=25, unique=True, validators=[
                    django.core.validators.RegexValidator('^[A-Za-z0-9_]{4,25}$')], verbose_name='用户名')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='邮箱')),
                ('last_name', models.CharField(max_length=20, verbose_name='姓')),
                ('first_name', models.CharField(max_length=20, verbose_name='名')),
                ('sex',
                 models.CharField(choices=[('M', '男'), ('F', '女')], default='M', max_length=1, verbose_name='性别')),
                ('mobile_number',
                 models.CharField(max_length=11, validators=[django.core.validators.RegexValidator('^[0-9]{11}$')],
                                  verbose_name='手机号码')),
                ('tel_number', models.CharField(blank=True, max_length=15, null=True,
                                                validators=[django.core.validators.RegexValidator('^[0-9]{7,15}$')],
                                                verbose_name='座机号码')),
                ('degree', models.CharField(
                    choices=[('1', '博士'), ('2', '硕士'), ('3', '大学本科'), ('4', '大学专科'), ('5', '高中、职中、中专'), ('6', '初中或以下')],
                    default='1', max_length=1, verbose_name='学历')),
                ('position', models.CharField(blank=True, max_length=50, null=True, verbose_name='职位')),
                ('field', models.CharField(blank=True, max_length=50, null=True, verbose_name='工作领域')),
                ('user_type',
                 models.CharField(choices=[('S', '超级管理员'), ('A', '管理员'), ('E', '专家用户'), ('M', '机构领导'), ('U', '机构用户')],
                                  default='U', max_length=1, verbose_name='用户类型')),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.Group',
                                                  verbose_name='groups')),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='users',
                                          to='organizations.organization', verbose_name='所属机构')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'app_user',
                'managed': True,
            },
        ),
    ]
